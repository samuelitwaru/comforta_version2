{
	"Name": "UC_AppToolBox",
	"Target": "",
	"IsControlType": false,
	"Template": "<link rel=\"stylesheet\" href=\"/Resources/UCGrapes/new-design/styles.css\" /><link  rel=\"stylesheet\"  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\"/><script>	function createBootstrapPage(pageData) {        let htmlString = \'\';        pageData.Row.forEach(row => {            htmlString += \'<div class=\"row p-2\">\';                        row.Col.forEach(col => {                htmlString += `                   <div class=\"col px-2\" data-gjs-selectable=\"false\" style=\"min-height: 100px;\">                   <button class=\"btn btn-primary btn-block\" style=\"width: 100%; min-height: 100px;\"                    onclick=\"window.location.href=\'${col.Tile.ToPageId}\'\">                   ${col.Tile.TileName}                   </button>                   </div>                `;            });			            htmlString += \'</div>\';        });	        return htmlString;    }	function createLayout(TileJson){					const small = `				<div class=\"grid small\" data-gjs-selectable=\"false\" data-gjs-draggable=\"false\"></div>			`		const medium = `				<div class=\"grid medium\" data-gjs-selectable=\"false\" data-gjs-draggable=\"false\"></div>			`		const large = `				<div class=\"grid large\" data-gjs-selectable=\"false\" data-gjs-draggable=\"false\"></div>			`		let layout = `			<div class=\"parent\" data-gjs-selectable=\"false\" data-gjs-droppable=\"false\">			`		for (let i = 0; i < TileJson.ChildTile.length; i++){			var childTile = TileJson.ChildTile[i]			switch (childTile.SG_TileWidth) {				case 1:				layout += small				break;				case 2:				layout += medium				break;				case 3:				layout += large				break;				default:				layout += large			}			}		layout += \'</div>\'		return layout	}	function loadScript(url, callback) {		const script = document.createElement(\'script\');		script.type = \'text/javascript\';		script.src = url;			// Execute callback when the script is loaded		script.onload = function() {			if (callback) {				callback();			}		};			// Handle error in loading the script		script.onerror = function() {			console.error(\'Failed to load script:\', url);		};			document.body.appendChild(script);	}</script><div id=\'body\'><div class=\"navbar\">  <h1>The APP toolbox builder</h1></div><div class=\"container\">  <div class=\"sidebar-left\">    <h3>TEMPLATES</h3>    <div class=\"template\" id=\"gjs-templates\"></div>  </div>  <div class=\"main-content\">    <div class=\"toolbar\">      <div class=\"toolbar-item\" id=\"themes-button\">        <i class=\"fas fa-palette\"></i>        <span>Themes</span>        <div class=\"dropdown\" id=\"themes-dropdown\">              <div class=\"dropdown-content\" id=\"theme-dropdown\"></div>        </div>      </div>      <div class=\"toolbar-item\">        <i class=\"fas fa-image\"></i>        <span>Media</span>      </div>      <div class=\"toolbar-item\">        <i class=\"fas fa-code-merge\"></i>        <span>Mapping</span>      </div>      <div class=\"toolbar-item\">        <i class=\"fas fa-upload\"></i>        <span>Publish</span>      </div>    </div>    <div class=\"mobile-frame\">      <div class=\"header\">        <span id=\"current-time\"></span>        <script>          function updateTime() {            const now = new Date();            let hours = now.getHours();            const minutes = now.getMinutes().toString().padStart(2, \"0\");            const ampm = hours >= 12 ? \"PM\" : \"AM\";            hours = hours % 12;            hours = hours ? hours : 12; // the hour \'0\' should be \'12\'            const timeString = `${hours}:${minutes} ${ampm}`;            document.getElementById(              \"current-time\"            ).textContent = timeString;			          }          updateTime();		  setInterval(updateTime, 10000); // Update the time every minute                  </script>        <span class=\"icons\">          <i class=\"fas fa-signal\"></i>          <i class=\"fas fa-wifi\"></i>          <i class=\"fas fa-battery-full\"></i>        </span>      </div>      <div id=\"gjs\">	  	<style>			.parent {				display: flex;				flex-wrap: wrap;				gap: 5px; /* Adds spacing between child elements */				padding: 5px;				height: 100%;				border: 1.5px solid red;							}			.grid {				min-height: 100px;				background-color: transparent; 				height: 100px; 				border-radius: 5px; 				border: 1.5px dashed #d6d3d3;			}			.small {				flex: 0 1 calc(33.33%);  /* -10px accounts for 2x 5px gutter */			}						/* Medium div takes 50% of the parent width */			.medium {				flex: 0 1 calc(50%);			}						/* Large div takes 100% of the parent width */			.large {				flex: 0 1 100%;			}		</style>	  </div>    </div>  </div>  <div class=\"sidebar-right\">    <div class=\"tab-container\" role=\"tablist\">      <button        class=\"tab active\"        role=\"tab\"        aria-selected=\"true\"        aria-controls=\"tools\"        id=\"tools-tab\"        data-target=\"tools\"      >        Tools      </button>      <button        class=\"tab\"        role=\"tab\"        aria-selected=\"false\"        aria-controls=\"properties\"        id=\"properties-tab\"        data-target=\"properties\"      >        Properties      </button>    </div>    <div      id=\"tools\"      class=\"tab-content active\"      role=\"tabpanel\"      aria-labelledby=\"tools-tab\"    >      <div class=\"blocks\" id=\"blocks\"></div>    </div>    <div      id=\"properties\"      class=\"tab-content\"      role=\"tabpanel\"      aria-labelledby=\"properties-tab\"      hidden    >    <div class=\"properties\" id=\"properties-panel\"></div>      <!-- <div class=\"properties\">        <h4>Traits</h4>        <div class=\"properties\" id=\"properties-panel\"></div>        <h4>Style</h4>        <div class=\"styles\" id=\"styles-panel\"></div>      </div> -->    </div>  </div></div></div><script src=\"/Resources/UCGrapes/new-design/plugin.js\"></script>", 
	"Events": [
		{
			"Name": "OnSave",
			"On": "save",
			"Parameters": ""
		} 
	],
	"Properties": [
		{
			"Id": "SDT_Tile",
			"Name": "SDT_Tile",
			"Type": "sdt",
			"Default": ""
		} ,
		{
			"Id": "SDT_Page",
			"Name": "SDT_Page",
			"Type": "sdt",
			"Default": ""
		} ,
		{
			"Id": "BC_Trn_TemplateCollection",
			"Name": "BC_Trn_TemplateCollection",
			"Type": "sdt",
			"Default": ""
		} ,
		{
			"Id": "BC_Trn_ThemeCollection",
			"Name": "BC_Trn_ThemeCollection",
			"Type": "sdt",
			"Default": ""
		} ,
		{
			"Id": "Layout",
			"Name": "Layout",
			"Type": "string",
			"Default": ""
		} 
	],
	"Methods": {
		"Public": [
			{
				"Name": "CreateLayout",
				"Source": "		// this function generates a layout based on the tile loaded		const small = `				<div class=\"grid-item\" style=\"flex: 1 1 100%; background-color: transparent; height: 100px; border-radius: 5px; border: 1.5px dashed #d6d3d3;\" data-gjs-draggable=\"false\"></div>			`		const medium = `				<div class=\"grid-item\" style=\"flex: 1 1 49%; background-color: transparent; height: 100px; border-radius: 5px; border: 1.5px dashed #d6d3d3;\" data-gjs-draggable=\"false\"></div>			`		const large = `				<div class=\"grid-item\" style=\"flex: 1 1 49%; background-color: transparent; height: 100px; border-radius: 5px; border: 1.5px dashed #d6d3d3;\" data-gjs-draggable=\"false\"></div>			`		let layout = `			<div class=\"custom-template\" style=\"display: flex; flex-direction: column; gap: 10px; padding: 10px; border: 1.5px dashed #d6d3d3;\" data-gjs-droppable=\"false\" data-gjs-draggable=\"false\">				<div class=\"header\" style=\"background-color: transparent; height: 100px; border-radius: 5px; border: 1.5px dashed #d6d3d3;\" data-gjs-draggable=\"false\"></div>			`		for (let i = 0; i < TileJson.ChildTile.length; i++){			var childTile = TileJson.ChildTile[i]			switch (childTile.SG_TileWidth) {				case 1:				layout += small				break;				case 2:				layout += medium				break;				case 3:				layout += large				break;				default:				layout += large			}			}		this.Layout = layout	",
				"Return": "",
				"Parameters": [
					 {
						"Name": "TileJson",
						"Type": "TileJson"
					} 
				]
			} 
		],
		"Private": [
		]
	},
	"Scripts": {
		"AfterShow": [
			{
				"Name": "Start",
				"Source": "			console.log(this.SDT_Page)				let layout = createBootstrapPage(this.SDT_Page)						//let layout = createLayout(this.SDT_Tile)		const themes = this.BC_Trn_ThemeCollection.map(theme => {			let res = {				name: theme.Trn_ThemeName, 				fontFamily: theme.Trn_ThemeFontFamily,				colors: {}			}			theme.Color.forEach(color => {				res.colors[color.ColorName] = color.ColorCode				})			return res		})				  		const UC = this				const editor = grapesjs.init({			container: \"#gjs\",			fromElement: true,			height: \"100%\",			width: \"auto\",			plugins: [\"app-builder-plugin\"],			blockManager: {				appendTo: \"#blocks\",				custom: true,			},			traitManager: {				appendTo: \"#properties-panel\",				custom: true,			},			// styleManager: {			//   appendTo: \"#styles-panel\",			// },			canvas: {				styles: [				\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\",				\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\",				],			},			dragMode: \"normal\",			panels: { defaults: [] },			sidebarManager: false,			modal: false,			commands: false,			storageManager: false,      	});			editor.addComponents(layout);			// Add blocks to BlockManager		this.BC_Trn_TemplateCollection.forEach((template) => {			editor.BlockManager.add(template.Trn_TemplateId, {				label: template.Trn_TemplateName,				category: \"Templates\",				content: template.Trn_TemplateContent, // Only the block content will be added to the canvas				media: template.Trn_TemplateMedia, // Media preview used for the sidebar			});		});						// Load templates into the sidebar on editor load		editor.on(\"load\", () => {			const templatesDiv = document.getElementById(\"gjs-templates\");			templatesDiv.innerHTML = \"\";									this.BC_Trn_TemplateCollection.forEach((template, index) => {				const blockElement = document.createElement(\"div\");				blockElement.className = \"template-wrapper\"; // Wrapper class for each template block								// Create the number element				const numberElement = document.createElement(\"div\");				numberElement.className = \"template-block-number\";				numberElement.textContent = index + 1; // Set the number								const templateBlock = document.createElement(\"div\");				templateBlock.className = \"template-block\";				templateBlock.innerHTML = `				<div>${template.Trn_TemplateMedia}</div>				`;								templateBlock				.querySelector(\"img\")				.addEventListener(\"dragstart\", (e) => {					e.preventDefault(); // Prevent the image from being dragged				});								blockElement.addEventListener(\"click\", () => {					// Add the block content (HTML) to the canvas when clicked					editor.addComponents(template.Trn_TemplateContent);				});								// Append number and template block to the wrapper				blockElement.appendChild(numberElement);				blockElement.appendChild(templateBlock);				templatesDiv.appendChild(blockElement);			});		});		// Update editor height based on available space		function updateEditorHeight() {			const mobileFrame = document.querySelector(\".mobile-frame\");			const header = mobileFrame.querySelector(\".header\");			const gjs = document.getElementById(\"gjs\");					const remainingHeight = mobileFrame.clientHeight - header.clientHeight;			gjs.style.height = `${remainingHeight}px`;			editor.refresh();		}		// Call the function initially and on window resize		updateEditorHeight();		window.addEventListener(\"resize\", updateEditorHeight);  		// Handle tab switching				const tabContainer = document.querySelector(\".tab-container\");		const tabs = document.querySelectorAll(\".tab\");		const tabContents = document.querySelectorAll(\".tab-content\");				function setActiveTab(targetId) {			tabs.forEach((tab) => {				const selected = tab.dataset.target === targetId;				tab.classList.toggle(\"active\", selected);				tab.setAttribute(\"aria-selected\", selected);			});						tabContents.forEach((content) => {				const isActive = content.id === targetId;				content.classList.toggle(\"active\", isActive);				content.hidden = !isActive;			});						// Save active tab to localStorage			localStorage.setItem(\"activeTab\", targetId);		}				tabContainer.addEventListener(\"click\", (event) => {			const tab = event.target.closest(\".tab\");			if (tab) {				setActiveTab(tab.dataset.target);			}		});				// Restore active tab from localStorage		const activeTab = localStorage.getItem(\"activeTab\") || \"tools\";		setActiveTab(activeTab);				const themesButton = document.getElementById(\"themes-button\");		const themesDropdown = document.getElementById(\"themes-dropdown\");				themesButton.addEventListener(\"click\", function (event) {			event.stopPropagation();			themesDropdown.style.display =			themesDropdown.style.display === \"block\" ? \"none\" : \"block\";		});				window.addEventListener(\"click\", function (event) {			event.preventDefault();			if (			!themesButton.contains(event.target) &&			!themesDropdown.contains(event.target)			) {				themesDropdown.style.display = \"none\";			}		});			// list the available themes		const themeDropdown = document.getElementById(\"theme-dropdown\");						// Loop through each theme and generate the HTML for theme options		themes.forEach((theme) => {			// Create theme option div			const themeOption = document.createElement(\"div\");			themeOption.classList.add(\"theme-option\");			themeOption.style.border = `1px solid ${theme.colors.primaryColor}`; 			themeOption.onclick = function() { setTheme(theme, themeOption); };						// Create theme title (h3)			const themeTitle = document.createElement(\"h3\");			themeTitle.textContent = theme.name;			themeTitle.style.color = theme.colors.primaryColor; 						// Create color palette div			const colorPalette = document.createElement(\"div\");			colorPalette.classList.add(\"color-palette\");									// Create color swatches for each of the theme\'s 6 colors			const colors = [				theme.colors.primaryColor,				theme.colors.secondaryColor,				theme.colors.backgroundColor,				theme.colors.textColor,				theme.colors.buttonBgColor,				theme.colors.accentColor,			];						colors.forEach((color, index) => {				const swatch = document.createElement(\"div\");				swatch.classList.add(\"color-swatch\");				swatch.style.backgroundColor = color;				swatch.title = [\"primary\", \"secondary\", \"background\", \"text\", \"button\", \"accent\"][index] + \" color\";				colorPalette.appendChild(swatch);			});											// Append title and color palette to the theme option			themeOption.appendChild(themeTitle);			themeOption.appendChild(colorPalette);									// Append the theme option to the dropdown			themeDropdown.appendChild(themeOption);		});		// Show properties in Properties tab		editor.on(\"component:selected\", (model) => {			setActiveTab(\"properties\");		});				function setActiveTab(targetId) {			const tabs = document.querySelectorAll(\".tab\");			const tabContents = document.querySelectorAll(\".tab-content\");						tabs.forEach((tab) => {				const selected = tab.dataset.target === targetId;				tab.classList.toggle(\"active\", selected);				tab.setAttribute(\"aria-selected\", selected);			});						tabContents.forEach((content) => {				const isActive = content.id === targetId;				content.classList.toggle(\"active\", isActive);				content.hidden = !isActive;			});						// Save active tab to localStorage			localStorage.setItem(\"activeTab\", targetId);		} 	//		editor.on(\'block:drag:stop\', (block) => {//			const selectedComponent = editor.getSelected(); // Get the dropped component//		//			if (selectedComponent) {//				const parentComponent = selectedComponent.parent(); // Get the parent container//				//				// If the component has a parent (which means it\'s inside a container)//				if (parentComponent) {//					// Get classes from the parent component//					const parentClasses = parentComponent.getClasses();//					//					// Add the parent\'s classes to the selected component//					selectedComponent.addClass(parentClasses);//					//					// Remove the parent container//					parentComponent.remove(); // Remove the container (parent)//					//					// The component will keep the transferred classes from the parent//					editor.addComponents(selectedComponent.toHTML()); // Add the dropped component//				}//			}//			editor.runCommand(\'core:open-code\')//		});//  	",
				"AngularLocation": ""
			} 
		],
		"BeforeShow": [
		]
	},
	"Dependencies": [
	],
	"Imports": [
	],
	"Styles": [
	]
}